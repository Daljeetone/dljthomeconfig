1. Framework Design
    1. Sources/Sinks
    3. Text Types 
    4. Routing
    4. Tagged text (meta-data)
    5. Forensics logging 
    6. Debug masks
    7. Global debug

2. Command usage 

    1. "consolerouter"
        
        Command details 
    
        1. Source/Sink listing 
        2. Routing
        3. Masking 
        4. Forensics Dump
   
   2. "consoleformat"
   
        Command details 
        
        1. Sink listing 
        2. Formatting Control
       
   3. "ramlog" 
   
        Command details 
        
        1. Legacy transition 
        1. Setup 
        2. Usage 
        
   4. "filelog" 
   
        Command details 
        
        1. Legacy transition 
        2. Usage 

Scenario Examples 

1. "What-just-happened?" (Forensics)
    1. Adding function names, source name 

2. "What's happening in xyz driver?" 

3. "What is being sent/received over passthrough?"

3. "Enabling prints causes the problem to go away"

4. "UART is so slow!"

5. "Enable debug output only in Smokey"

6. "Measuring timing"

Developer's Guide:

What do we want to cover:

- All the logging API calls and how to use them 
- The registration API 
- That all drivers by default are registered as legacy sources with the name = macho name 
- Using LOG_* calls and how they translate to default modules 
- You can register'' multiple sources 
- Registration of libraries 
- How to handle global debug levels
- Up-coming features 
- Legacy functions

1. Pre-requisites 

   Assumes you have read the User Guide. 

2. Module registration
    1. API 
    1. Legacy vs Registered Sources 
    1. Libraries 
    2. Global Debug + Criteria
    3. Multiple Instances

3. Logging API 

4. Legacy Functions 

{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red202\green219\blue254;\red192\green237\blue254;}
\margl1440\margr1440\vieww12240\viewh18940\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs36 \cf0 Smokey "Cinnamon" Implementation Update \'97 Nov 27, 2012\

\b0\fs24 \
Organized by functional area and radar number.\
\
\cb2 FILE OUTPUT\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12210753> Make Smokey run on read-only filesystems\
\pard\pardeftab720
\cf0 \cb1 \
Two new properties have been defined to control Smokey's output: 
\b ResultsBehavior
\b0  and 
\b LogBehavior.
\b0 \
\
\pard\pardeftab720

\b \cf0 LogBehavior
\b0 \
	- "Full" enables writing to console and file\
		- Default when property is not defined\
	- "ConsoleOnly" disables writing to file\
	- "FileOnly" disables writing to console\
	- "NoLogging" disables both console and file output\
\

\b ResultsBehavior
\b0 \
	- "Bookend"updates PDCA.plist at the start and finish of the sequence\
		- Default when property is not defined\
	- "AlwaysWrite" updates PDCA.plist as soon as new data is available\
	- "NoFile" disables writing to PDCA.plist\
\
To disable all file output but keep console output, set LogBehavior to 
\b ConsoleOnly
\b0  and ResultsBehavior to 
\b NoFile
\b0 \
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/11094389> [Smokey] Don't re-run a sequence if results are present\
\pard\pardeftab720
\cf0 \cb1 \
Due to concerns about losing data when re-running a sequence, Smokey will now error out if it detects content in the Smokey.log and/or PDCA.plist files. \'a0This behavior presently can 
\b not
\b0  be disabled. \'a0However, it is still possible to re-run a sequence if file output is disabled at the command line:\
\
\pard\pardeftab720

\f1 \cf0 	smokey 
\f2\b SEQUENCE
\f1\b0  --run LogBehavior=ConsoleOnly ResultsBehavior=NoFile
\f0 \
\
Related: <rdar://problem/12625748> Need a way for Smokey to run when Smokey.log has contents\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12317213> Don't clear .FactoryLogsWaitingToBeCollected when invoked by Earthbound (nor do other factory control stuff)\
\pard\pardeftab720
\cf0 \cb1 \
Not directly related to sequence implementation, but new properties have been defined that Earthbound will use when running Smokey sequences at Burnin: 
\b LogCollectorControl
\b0  and 
\b ControlBitAccess
\b0 .\
\
\pard\pardeftab720

\b \cf0 LogCollectorControl
\b0 \
	- "Semaphore" sets .FactoryLogsWaitingToBeCollected when PDCA.plist is written\
		- Default when property is not defined\
	- "None" disables modification of .FactoryLogsWaitingToBeCollected\
		- Will be set by Earthbound\
\

\b ControlBitAccess
\b0 \
	- "Default" enables control bit writing when appropriate for the sequence\
		- Default when property is not defined\
	- "ReadOnly" disables control bit writing\
		- Will be set by Earthbound\
\
\pard\pardeftab720
\cf0 \cb2 FILE INPUT\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12209950> Support for "universal" or "default" sequence\
\pard\pardeftab720
\cf0 \cb1 \
Sequences that use purely platform-agnostic commands can now use a common implementation across all platforms. \'a0When Smokey can not find the files within a sequence directory for the DUT platform, it will fall back to "universal" files.\
\
These files must be named 
\b Main.plist
\b0  and 
\b Main.lua
\b0 \'a0and placed in the same directory as the Smokey output files (Smokey.log and PDCA.plist).\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12625470> Smokey Platform files clobber each other\
\pard\pardeftab720
\cf0 \cb1 \
With the goal of simultaneously allowing\
\
	(1) the same sequence name to be used across platforms\
	(2) the implementation to vary by platform, and\
	(3) a sequence implementation to include supporting Lua files with the same name (but different contents) across platforms,\
\
Smokey now supports placing files for a particular platform within a subdirectory of the sequence. \'a0When given the name 
\b SEQUENCE
\b0  on platform 
\b Z99
\b0 , and in conjunction with support for "universal" implementations, Smokey searches for the sequence .plist file in the order below. \'a0The .lua file is expected to be at the same location as the .plist file.\
\
	1.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\\'a0SEQUENCE\\Z99\\
\b Main.plist
\b0 \
	2.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\\'a0SEQUENCE\\
\b Z99.plist
\b0 \
	3.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\\'a0SEQUENCE\\
\b Main.plist
\b0 \
\
Note that the new file convention uses the same 
\b Main.plist
\b0  and 
\b Main.lua
\b0 \'a0names for both platform-agnostic and platform-specific implementations. \'a0The two file names are used across different platforms as well. \'a0The distinction is made by the location of the files.  If nothing else, this might make it easier to bring up a sequence on new platforms.\
\
For the time being, the 
\b Z99.plist
\b0  convention is supported, but it is recommended that platform-specific directories that be used going forward.\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/11592130> Include additional external files in Smokey\
<rdar://problem/12666374> Add Shared directory to searchpath for require\
\pard\pardeftab720
\cf0 \cb1 \
Smokey now implements search paths \'a0in order to simply the use of external files. \'a0There is support for locating both code files (*.lua) and auxiliary files (anything else).\
\
Additional code can be loaded via Lua's 
\b require
\b0  function. \'a0Following the Lua convention, the name of the "module" (or file) is specified as a string without the .lua extension. \'a0For a given name 
\b SEQUENCE
\b0 \'a0and platform 
\b Z99
\b0 , Smokey uses the following directory search order to locate the file passed to 
\b require
\b0 .\
\
	1.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\Shared			(i.e. sequence-agnostic directory)\
	2.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\SEQUENCE\\Z99 \'86	(i.e. platform-specific directory)\
	3.\'a0nandfs:\\AppleInternal\\Diags\\Logs\\Smokey\\SEQUENCE		(i.e. sequence root directory)\
\
\'86 Valid only when Smokey is using the 
\b Main.plist
\b0  and 
\b Main.lua
\b0  files from that directory.\
\
(Note that Lua's module hierarchy conventions apply to the Shared directory. \'a0This means that external Lua code can be organized by directory. \'a0Consult Lua documentation or ask the EFI diags team if this is interesting to you.)\
\
The complement to 
\b require
\b0  is the new global function 
\b FindSequenceFile
\b0 . \'a0Given a file name (as a string), it will search the directories under the sequence directory in the order above (i.e. it ignores the Shared directory).  If the file is found, the full path to the file is returned as a string, which may then be passed a function like 
\b io.open
\b0 .  If not found, an exception is thrown.\
\
\cb2 SEQUENCE OUTPUT\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12203797> Method for scripts to add text to Smokey.log\
\pard\pardeftab720
\cf0 \cb1 \
\pard\pardeftab720

\b \cf0 SmokeyPrintLogger
\b0  has been an interim solution for putting custom text into Smokey.log.  It is now deprecated and replaced with a trio of new functions: 
\b PrintString
\b0 , 
\b WriteString
\b0 , and 
\b PrintStep
\b0 .\
\
\pard\pardeftab720

\f1 \cf0 PrintString(
\f2\b String
\f1\b0 )\
PrintString(
\f2\b String
\f1\b0 , 
\f2\b Routing
\f1\b0 )\
\pard\pardeftab720

\f0 \cf0 	- Print the given string 
\b with
\b0  a trailing newline character\
		- Output is left-aligned but otherwise not decorated\
		- Separated from Smokey output by a horizontal line of dashes\
	- Output is sent to the specified routing, if specified\
\
\pard\pardeftab720

\f1 \cf0 WriteString(
\f2\b String
\f1\b0 )\
WriteString(
\f2\b String
\f1\b0 , 
\f2\b Routing
\f1\b0 )\
\pard\pardeftab720

\f0 \cf0 	- Print the given string 
\b without
\b0  a trailing newline character\
		- Output is left-aligned but otherwise not decorated\
		- Repeated calls can be used to generate a line of text from smaller pieces\
		- Separated from Smokey output by a horizontal line of dashes\
	- Output is sent to the specified routing, if specified\
\
\pard\pardeftab720

\f1 \cf0 PrintStep(
\f2\b String
\f1\b0 )\
PrintStep(
\f2\b String
\f1\b0 , 
\f2\b Routing
\f1\b0 )\
\pard\pardeftab720

\f0 \cf0 	- Print the given string plus a trailing newline character in the context of the current test in the Smokey trace\
		- Line is preceded with time stamp and current node ID\
		- Text is indented by the depth of the current node within the sequence\
	- Output is sent to the specified routing, if specified\
\
All three functions share the same definition of the 
\b Routing
\b0  parameter.  Note that file output is gated by file output in 
\b LogBehavior
\b0 ; when LogBehavior is "ConsoleOnly" or "NoLogging", file output is ignored.\
\
\pard\pardeftab720

\b \cf0 Routing
\b0  parameter\
	- nil or omitted is the same as "Full"\
	- "Full" sends output to console and file\
	- "ConsoleOnly" sends output to console only\
	- "FileOnly" sends output to file only\
	- "None" ignores output\
\
\pard\pardeftab720
\cf0 \cb2 SMOKEY INVOCATION\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/11639076> Add the ability to call a single test by name\
\pard\pardeftab720
\cf0 \cb1 \
For testing and/or validation purposes, it is now possible to run a single test from the EFI command line with the syntax below.\
\
\pard\pardeftab720

\f1 \cf0 smokey --run SEQUENCE --test 
\f2\b NAME
\f1\b0 \
smokey --run SEQUENCE --test 
\f2\b NAME
\f1\b0 ,
\f2\b ITERATIONS
\f1\b0 \
\pard\pardeftab720

\f0 \cf0 	- The --test option can appear multiple times and the options accumulate\
	- Tests not specified at the command line have their 
\b NumberOfTimesToRun
\b0  property set to 0\
	- The 
\b NAME
\b0  parameter can either be the value of the 
\b TestName
\b0  property, or the 
\b ActionToExecute
\b0  property if TestName is not defined for the test\
	- The 
\b ITERATIONS
\b0  parameter is defaults to 1 if not specified\
\
Due to <rdar://problem/11094389>, it would be a good idea to specify 
\b LogBehavior
\b0  and 
\b ResultsBehavior
\b0  at the command line if re-testing.\
\
\cb2 RESULTS REPORTING\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/11837716> P105 DVT Burnin: Wildfire failed test item but show PASS in PDCA.plist\
\pard\pardeftab720
\cf0 \cb1 \
The behavior of 
\b ReportData
\b0  has been updated to match the way that PDCA handles pass/fail for parametric data.  This means that sequences no longer have to manually check limits themselves.\
\
For data with limits:\
	- Smokey will mark the datum as pass if and only if (lower <= value) and (value <= upper)\
	- If the lower limit is omitted, the lower limit check is omitted; likewise for the upper limit\
	- Failed data will automatically fail the current test iteration without aborting the current test\
	- Failed data will also fail the overall result\
\
For data without limits:\
	- No change from previous behavior\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12746788> Smokey ReportData doesn't return anything\
\pard\pardeftab720
\cf0 \cb1 \
\pard\pardeftab720

\b \cf0 ReportData
\b0  now returns true/false based on whether the value is within limits (i.e. the same pass/fail that Smokey reports to PDCA for the datum).  This means that sequences no longer have to manually check limits themselves.\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12204087> Make PDCA.plist write-through\
\pard\pardeftab720
\cf0 \cb1 \
Smokey buffers results so that they can be written at the end of the sequence.  For long-term testing, results can be written to file immediately as data is available by setting ResultsBehavior to AlwaysWrite.  The PDCA.plist file will be written:\
\
	- For each call of 
\b ReportData
\b0 \
	- For each call of 
\b ReportAttributes
\b0 \
	- After each ActionToExecute\
\
\cb2 USER INTERFACE\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12190761> ER: Provide more feedback on Smokey screen on script progress\
\pard\pardeftab720
\cf0 \cb1 \
The following are shown on the DUT screen:\
	- Sequence name\
	- Overall sequence progress (percentage)\
	- Current name and iteration\
	- Charger brick ID\
\
\cb2 SEQUENCE SCHEMA\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12243616> Propagate failures from an inner action to an outer action when test items are nested\
\pard\pardeftab720
\cf0 \cb1 \
The Smokey .plist schema formerly supported defining both a 
\b ActionToExecute
\b0  property and a 
\b Tests
\b0  array within a single test, with the action executed before the array is handled.  The schema has been simplified, so this is no longer supported.  A test in the .plist file must define either ActionToExecute or Tests, but not both.\
\
\cb2 COMMAND OUTPUT\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12323080> Dynamic console output capture size in Shell()\
\pard\pardeftab720
\cf0 \cb1 \
Smokey relies on a console log in EFI diags to capture command output.  The default log size is 8KB.  For commands with copious output, there are now two formal methods of resizing the console log: 
\b Shell
\b0  and 
\b ConsoleLogSize
\b0 .\
\
\pard\pardeftab720

\f1 \cf0 Shell("command line")\
Shell("command line", 
\f2\b TempLogSize
\f1\b0 )\
\pard\pardeftab720

\f0 \cf0 	- The first form is the existing calling convention uses the current console log size\
	- The second form changes the console log only for the command line given (i.e. log size is reverted before the 
\b Shell
\b0  function completes)\
\
\pard\pardeftab720

\f1 \cf0 ConsoleLogSize(
\f2\b NewLogSize
\f1\b0 )\

\f2\b OldSize
\f1\b0  = ConsoleLogSize()\

\f2\b OldSize
\f1\b0  = ConsoleLogSize(
\f2\b NewLogSize
\f1\b0 )\
\pard\pardeftab720

\f0 \cf0 	- Changes are persistent (including reboots via SaveState) until the end of the sequence or the next ConsoleLogSize call\
	- Can be used to simultaneously get the previous log size and set a new log size in one call\
	- Returns log size without changing it when called without parameters\
\
\cb2 SMOKEY SIMULATOR\
\cb1 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12190741> ER: Release Smokey simulator into release builds\
\pard\pardeftab720
\cf0 \cb1 \

\b SmokeySimulator
\b0  packages a Lua interpreter with the Smokey sequencer code.  The end result is Darwin binary that behaves similarly to the 
\b smokey
\b0  command on the DUT.  Presently, this allows sequences to be checked for syntax and properties to be validated.  Commands can be executed, but a little bit of work is required to emulate the DUT.\
\
The simulator is distributed as a .zip file.  Included are a make file, the simulator binary, support files, and two sample sequences.\
\
	Makefile\
	SmokeySimulator\
	State.txt\
	HelloWorld/\
		.FactoryLogsWaitingToBeCollected\
		Main.lua\
		Main.plist\
		PDCA.plist\
		Smokey.log\
	StIves/\
		.FactoryLogsWaitingToBeCollected\
		Main.lua\
		Main.plist\
		PDCA.plist\
		Smokey.log\
\
While in the simulator directory, several commands are supported\
\
\pard\pardeftab720

\f1 \cf0 make files\
\pard\pardeftab720

\f0 \cf0 	- Regenerates State.txt\
	- Regenerates .FactoryLogsWaitingToBeCollected, PDCA.plist, and Smokey.log for the sample sequences\
\
\pard\pardeftab720

\f1 \cf0 make clean\
\pard\pardeftab720

\f0 \cf0 	- Delete auxiliary files generated by the simulator\
\
\pard\pardeftab720

\f1 \cf0 ./SmokeySimulator 
\f2\b SEQUENCE
\f1\b0 \
\pard\pardeftab720

\f0 \cf0 	- Sanity check the sequence named 
\b SEQUENCE
\b0 \
	- The 
\b SEQUENCE
\b0  parameter is actually a relative or absolute path to the directory containing the sequence files\
	- Additional Smokey command line options may be used as well\
\
Inside the simulator, command lines passed to the 
\b Shell
\b0  function are invoked verbatim, meaning that the simulator will run those commands on the host.  This is currently a limitation of the simulator environment that will be addressed in a near future release.  For now, this can be worked around by creating shell scripts that emit the same output.  For instance, to emulate this behavior for the 
\b wifi
\b0  command on the DUT:\
\
\pard\pardeftab720

\f1 \cf0 [0000008C:4F5C1933] :-) wifi --on\
WiFi on success\
[0000008C:4F5C1933] :-) wifi --properties    \
\
                type: "WiFi"\
              vendor: "Broadcom"\
               model: "0000A94E"\
            mac-addr: "14:10:9F:CC:AD:57"\
       chip-revision: "00000000"\
             powered: "Yes"\
            sleeping: "No"\
     module-revision: "2.3 V=u"\
     firmware-loaded: "Yes"\
   firmware-filename: "usb-ag-mfgtest-nodis-oob-seqcmds-lp-ram.bin.trx"\
      nvram-filename: "bcm943342ChardonnayUSIKK.nvm"\
             channel: "1"\
           module-sn: "28 1F 48 80 00 B3"\
\
[0000008C:4F5C1933] :-) wifi --properties vendor\
Broadcom\
[0000008C:4F5C1933] :-) \
\pard\pardeftab720

\f0 \cf0 \
we could create a script in the simulator directory named 
\b wifi
\b0  and fill it with these commands:\
\
\pard\pardeftab720

\f1 \cf0 #!/bin/bash\
if [ "$*" = "--on" ]; then\
cat<<EOF\
WiFi on success\
EOF\
elif [ "$*" = "--properties" ]; then\
cat<<EOF\
\
                type: "WiFi"\
              vendor: "Broadcom"\
               model: "0000A94E"\
            mac-addr: "14:10:9F:CC:AD:57"\
       chip-revision: "00000000"\
             powered: "Yes"\
            sleeping: "No"\
     module-revision: "2.3 V=u"\
     firmware-loaded: "Yes"\
   firmware-filename: "usb-ag-mfgtest-nodis-oob-seqcmds-lp-ram.bin.trx"\
      nvram-filename: "bcm943342ChardonnayUSIKK.nvm"\
             channel: "1"\
           module-sn: "28 1F 48 80 00 B3"\
\
EOF\
elif [ "$*" = "--properties vendor" ]; then\
cat<<EOF\
Broadcom\
EOF\
else\
exit 1\
fi\
\pard\pardeftab720

\f0 \cf0 \
The basic idea is to execute the command once on a DUT and have the script print the same output when the same command line is detected.  A separate script would be required for each EFI command to be simulated.\
\
Related: <rdar://problem/12557398> Smokey Simulator Link\
\
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12664804> SmokeySimulator needs a way to configure the platform ID when simulator is used for sanity checking sequences\
\pard\pardeftab720
\cf0 \cb1 \
The platform ID defaults to the fictional value Z99.  The 
\b --platform
\b0  parameter can be used to override it.  For example, to run a sequence named 
\b SEQUENCE
\b0  for the platform 
\b X33
\b0 :\
\
\pard\pardeftab720

\f1 \cf0 	./SmokeySimulator 
\f2\b SEQUENCE
\f1\b0  --run 
\f2\b --platform X33
\f1\b0 \
\pard\pardeftab720

\f0 \cf0 \
\pard\pardeftab720
\cf0 \cb3 <rdar://problem/12666374> Add Shared directory to searchpath for require\
\pard\pardeftab720

\b \cf0 \cb1 \
\pard\pardeftab720

\b0 \cf0 The simulator does not have a predefined path for the shared Smokey files, so this must be specified with the 
\b --shared
\b0  command line option.\
\
\pard\pardeftab720

\f1 \cf0 	./SmokeySimulator 
\f2\b SEQUENCE
\f1\b0  --run 
\f2\b --shared /path/to/Blaze/Shared
\f1\b0 \
\pard\pardeftab720

\f0 \cf0 \
EOF}